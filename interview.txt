- Impl a string replace function. to replace a sub string sub in a string str to another string des

- 6. ZigZag Conversion   QuestionEditorial Solution  My Submissions
Total Accepted: 114952
Total Submissions: 450967
Difficulty: Easy
Contributors: Admin
The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"
Write the code that will take a string and make this conversion given a number of rows:

string convert(string text, int nRows);
convert("PAYPALISHIRING", 3) should return "PAHNAPLSIIGYIR".

- 把一个7进制的数转换成3进制的数，7进制的数用string存储
能处理大数的转换

- 已知点p(x,y),和一个坐标系C(u,v,theta);求p相对于C的坐标
Given a point p(x,y), a coordinate C(u,v,theta)
compute the coordinate of p relative to C

- 为什么需要shared_ptr<>，实现一个shared_ptr<>
impl a shared_ptr<>? 

- 31. Next Permutation

实现下一个排列，它将数字重新排列成数字的字典顺序更大的排列。

如果这样的安排是不可能的，它必须将其重新排列为最低可能的顺序（即，以升序排序）。

更换必须在位，不要分配额外的内存。

这里有些例子。 输入位于左侧列中，其对应的输出位于右侧列中。

Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1


class Solution {
public:
/*从后面往前看，找到第一个递减的一对i-1, i，
在i..N中最小但大于i-1那个和i-1交换
，再讲i+1...N排序*/
    void nextPermutation(vector<int>& nums) {
        int n=nums.size(),i=n-1;
        while(i>0 && nums[i]<=nums[i-1])i--;
        if(i==0)sort(nums.begin(), nums.end());
        else{
            
            int minMax=i;
            for(int j=i+1; j<n; j++)
            {
                if(nums[j]<nums[minMax] && nums[j]>nums[i-1])
                  minMax = j;
            }
            swap(nums[i-1],nums[minMax]);
            sort(nums.begin()+i, nums.end());
        }
    }
};

